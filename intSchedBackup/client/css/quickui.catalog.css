/*** AdPlaceholder ***/

.AdPlaceholder {
    -moz-box-sizing: border-box;
    box-sizing: border-box;
    display: table;
}

.AdPlaceholder .container {
    display: table-cell;
    text-align: center;
    vertical-align: middle;
}

/* Generic appearance */
.AdPlaceholder.generic {
    background: gray;
    color: white;
}
.AdPlaceholder.generic .label {
    font-weight: bold;
}

/*** ArrayTable ***/

.ArrayTable {
    display: table;
}
.ArrayTable > * {
    display: table-row;
}
.ArrayTable > * > * {
    display: table-cell;
}

/*** AutoSizeTextBox ***/

.AutoSizeTextBox {
    position: relative;
}

.AutoSizeTextBox .textBox {
    -moz-box-sizing: border-box;
    box-sizing: border-box;
    height: 100%;
    margin: 0;
    overflow: hidden;
    position: absolute;
    resize: none;
    top: 0;
    width: 100%;
}

.AutoSizeTextBox .textCopy {
    -moz-box-sizing: border-box;
    box-sizing: border-box;
    margin: 0;
    visibility: hidden;
    white-space: pre-wrap; /* So lines wrap */
    width: 100%;
}

/*** BasicButton ***/

.BasicButton {
    background: none; /* Better to start with no background than a browser-dependent one. */
    border: none; /* Many button styles don't want a border by default. */
    border-width: 0; /* IE8 thinks there's a border width even when border is none. */ 
    -moz-box-sizing: border-box;
    box-sizing: border-box;
    color: inherit; /* Suppress browser's use of special button text color. */
    cursor: pointer; /* Improves consistency */
    font-size: 100%; /* Corrects font size not being inherited in all browsers */
    margin: 0; /* Addresses margins set differently in IE6/7, FF3+, S5, Chrome */
    overflow: visible; /* Removes inner spacing in IE8 without affecting normal text inputs */
    text-align: left; /* Many more things behave like buttons than want to be center-aligned like a stock button. */
    vertical-align: baseline; /* Improves appearance and consistency in all browsers */
}

.BasicButton.disabled {
    cursor: default; /* Re-set default cursor for disabled buttons */
}

/*
 * Removes inner padding and border in FF3+
 * www.sitepen.com/blog/2008/05/14/the-devils-in-the-details-fixing-dojos-toolbar-buttons/
 */
.BasicButton::-moz-focus-inner {
    border: 0;
    padding: 0;
}

/*
 * Generic apperance
 * By design, this is fairly plain, with just a bit of 3D, in order to fit in
 * reasonably well in many contexts. Inspired by Twitter Bootstrap's buttons.
 */
.BasicButton.generic {
    background: whitesmoke;
    background-image: -moz-linear-gradient(top, white, #e6e6e6);
    background-image: -ms-linear-gradient(top, white, #e6e6e6);
    background-image: -webkit-linear-gradient(top, white, #e6e6e6);
    background-image: linear-gradient(top, white, #e6e6e6);
    border: 1px solid #ccc;
    -moz-border-radius: 3px;
    -webkit-border-radius: 3px;
    border-radius: 3px;
    -moz-box-shadow: inset 0 1px 0 rgba(255, 255, 255, .2), 0 1px 2px rgba(0, 0, 0, .05);
    -webkit-box-shadow: inset 0 1px 0 rgba(255, 255, 255, .2), 0 1px 2px rgba(0, 0, 0, .05);
    box-shadow: inset 0 1px 0 rgba(255, 255, 255, .2), 0 1px 2px rgba(0, 0, 0, .05);
    color: #333;
    font-family: sans-serif; /* Addresses font-family inconsistency between 'textarea' and other form elements. */
    filter: progid:DXImageTransform.Microsoft.gradient(GradientType=0,startColorstr=white, endColorstr=#e6e6e6);
    padding: 0.3em 0.6em;
    text-align: center;
    text-shadow: 0 1px 1px rgba(255,255,255,.75);
    white-space: nowrap;
    vertical-align: middle;
}

/* Opt out of border, background, etc. in the normal state. */
.BasicButton.quiet {
    background: none;
    border-color: transparent;
    box-shadow: none;
    filter: none;
}

.BasicButton.generic:focus {
    outline: thin dotted #333 \9; /* IE 8/9 */
}

/* 
 * We use ".hover" as well as ":hover" so the hover state can be
 * programmatically applied.
 */
.BasicButton.generic:hover,
.BasicButton.generic.hover {
    background-color: #e6e6e6;
    background-image: -moz-linear-gradient(top, white, #eee);
    background-image: -ms-linear-gradient(top, white, #eee);
    background-image: -webkit-linear-gradient(top, white, #eee);
    background-image: linear-gradient(top, white, #eee);
    border-bottom-color: #ccc;
    border-left-color: #ddd;
    border-right-color: #ddd;
    border-top-color: #e0e0e0;
    color: #222;
    filter: progid:DXImageTransform.Microsoft.gradient(GradientType=0,startColorstr=white, endColorstr=#eeeeee);
    text-shadow: 0 1px 3px white;
}

.BasicButton.generic:active,
.BasicButton.generic.active {
    background-color: #d9d9d9;
    background-color: #d0d0d0 \9; /* IE 8/9 */
    background-image: none;
    border-color: #aaa;
    -moz-box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.15), 0 1px 2px rgba(0, 0, 0, 0.05);
    -webkit-box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.15), 0 1px 2px rgba(0, 0, 0, 0.05);
    box-shadow: inset 0 1px 4px 2gba(0, 0, 0, 0.15), 0 1px 2px rgba(0, 0, 0, 0.05);
    color: #111;
    filter: none;
    outline: 0;
}

.BasicButton.generic.disabled,
.BasicButton.generic[disabled] {
    background: whitesmoke;
    border: 1px solid #ccc;
    -moz-box-shadow: none;
    -webkit-box-shadow: none;
    box-shadow: none;
    color: #999;
    text-shadow: none;
}

/*** BlogPost ***/

/* Generic appearance */
.BlogPost.generic .BlogPost_postTitle {
    color: inherit;
    font-size: larger;
    font-weight: bold;
    text-decoration: none;
}

/*** CalendarDay ***/

/* Subclasses can extend these */
.CalendarDay {}
.CalendarDay.alternateMonth {}
.CalendarDay.firstWeek {}
.CalendarDay.firstDayOfMonth {}
.CalendarDay.lastDayOfMonth {}
.CalendarDay.today {}
.CalendarDay.sunday {}
.CalendarDay.saturday {}
.CalendarDay.weekday {}
.CalendarDay.past {}
.CalendarDay.future {}
.CalendarDay.insideMonth {}
.CalendarDay.outsideRange {}

/* Generic appearance */
.CalendarDay.generic {
    border: 1px solid transparent;
    font-family: sans-serif;
    padding: 4px;
    text-align: right;
}
.CalendarDay.generic.today {
    color: darkred;
    font-weight: bold;
}

/*** CalendarDayButton ***/

.CalendarDayButton .button {
    -moz-box-sizing: border-box;
    box-sizing: border-box;
    display: block;
    height: 100%;
    width: 100%;
}

/* Generic appearance */
.CalendarDayButton.generic {
    border: none;
    padding: 0;
}
.CalendarDayButton.generic .button {
    border-radius: 0;
    line-height: 1.2; /* Helps button stay same height when bold is applied */
    padding: 4px;
    text-align: right;
}
.CalendarDayButton.generic.outsideMonth .button {
    color: #bbb;
}
.CalendarDayButton.generic.selected .button {
    background-color: #ddd;
    font-weight: bold;
}
.CalendarDayButton.generic.today.insideMonth .button {
    color: darkred;
    font-weight: bold;
}

/*** CalendarMonth ***/

.CalendarMonth {
    display: table-row-group;
}

/* Generic appearance */
.CalendarMonth .CalendarDay.generic.outsideMonth {
    color: #aaa;
}

.CalendarMonth .CalendarWeek.hidden {
    display: none;
}

/*** CalendarMonthWithHeadings ***/

.CalendarMonthWithHeadings .monthName {
    display: block;
}

.CalendarMonthWithHeadings .monthTable {
    display: table;
    width: 100%;
}

.CalendarMonthWithHeadings .daysOfWeek {
    display: table-header-group;
}

/* Generic appearance */
.CalendarMonthWithHeadings.generic {
    display: inline-block;
    font-family: sans-serif;
}
.CalendarMonthWithHeadings.generic .monthName {
    font-weight: bold;
    padding: 4px;
    text-align: center;
}
.CalendarMonthWithHeadings.generic .daysOfWeek {
    font-size: smaller;
}

/*** CalendarWeek ***/

.CalendarWeek {
    display: table-row;
}
.CalendarWeek > * {
    display: table-cell;
    width: 14.2%; /* One seventh */
}

/* Subclasses can extend these */
.CalendarWeek .week {}
.CalendarWeek .day.insideMonth {}
.CalendarWeek .day.outsideRange {}

/*** Collapsible ***/

.Collapsible .Collapsible_heading {
    clear: both;
    cursor: pointer;
}

/* Subclasses can add their own rules for this class. */
.Collapsible.collapsed {}

/* Generic appearance */
.Collapsible.generic {
    border: 1px solid lightgray;
}

.Collapsible.generic .Collapsible_heading {
    background: #f0f0f0;
    font-weight: bold;
    padding: 0.5em 0.5em 0.5em 1em;
}

/*
 * The animation seems to work better if the top/bottom padding is actually
 * implemented as top/bottom margin on the content. So we apply left/right
 * padding to the container, but top/bottom margin on the content.
 */
.Collapsible.generic .Collapsible_content {
    overflow: auto;
    padding: 1em;
}
.Collapsible.generic .Collapsible_content > *:first-child {
    margin-top: 0;
}
.Collapsible.generic .Collapsible_content > *:last-child {
    margin-bottom: 0;
}

/*** CollapsibleWithHeadingButton ***/

.CollapsibleWithHeadingButton .headingButton {
    float: right;
}

.CollapsibleWithHeadingButton .Collapsible_content {
    clear: both;
}

.CollapsibleWithHeadingButton .collapsedButtonContent {
    display: none;
}
.CollapsibleWithHeadingButton .expandedButtonContent {
    display: block;
}
.CollapsibleWithHeadingButton.collapsed .collapsedButtonContent {
    display: block;
}
.CollapsibleWithHeadingButton.collapsed .expandedButtonContent {
    display: none;
}

/* Generic appearance */
.CollapsibleWithHeadingButton.generic .CollapsibleWithHeadingButton_heading {
    background: #f0f0f0;    /* Fader requires explicit background color. */
}

.CollapsibleWithHeadingButton.generic .headingButton {
    font-weight: normal;
    margin-left: 1em;
}

.CollapsibleWithHeadingButton.generic .headingButton.BasicButton.generic {
    padding: 0 0.25em;
}

/*** ColorSwatch ***/

.ColorSwatch {
    -moz-box-sizing: border-box;
    box-sizing: border-box;
    height: 1.25em;
    margin: 3px;
    width: 1.25em;
}

.ColorSwatch.none {
    border: 1px solid lightgray;
}

/*** ColorSwatchTextBox ***/

.ColorSwatchTextBox {
    display: inline-block;
}

.ColorSwatchTextBox > * {
    display: inline-block;
    vertical-align: middle;
}

.ColorSwatchTextBox .swatch {
    margin-left: 6px;
}

/*** DaysOfWeek ***/

.DaysOfWeek .dayOfWeek {
    display: table-cell;
}

/* Generic appearance */
.DaysOfWeek.generic .dayOfWeek {
    text-align: center;
}

/*** Fader ***/

.Fader {
    background-color: #ffffff;
    overflow: hidden;
    position: relative;
}

.Fader .Fader_content {
    white-space: nowrap;
}

.Fader.vertical .Fader_content {
    white-space: inherit;
}

.Fader .gradient {
    position: absolute;
}
.Fader.horizontal .gradient {
    height: 100%;
    right: 0;
    top: 0;
    width: 1.5em;
}
.Fader.vertical .gradient {
    bottom: 0;
    height: 1.5em;
    width: 100%;
}

/*** FlickrInterestingDay ***/

.FlickrInterestingDay {
    background: white;
    padding: 3px;
    text-align: left;
    vertical-align: top;
}

.FlickrInterestingDay .FlickrInterestingDay_content {
    color: white;
    font-family: "Trebuchet MS", Arial, Helvetica, sans-serif;
    font-size: 18px;
    padding-left: 4px;
    position: absolute;
    text-shadow: black 1px 1px 0;
    z-index: 1;
}

.FlickrInterestingDay .link {
    text-decoration: none;
}

.FlickrInterestingDay .image {
    border: none; /* For IE */
    display: block;
    height: 75px;
    padding: 1px;
    width: 75px;
}

.FlickrInterestingDay.past {
    border-color: #7e7262;
}
.FlickrInterestingDay.today,
.FlickrInterestingDay.future {
    border-color: #e5e5e5;
    padding: 3px 0 0 4px;
}
.FlickrInterestingDay.today .FlickrInterestingDay_content,
.FlickrInterestingDay.future .FlickrInterestingDay_content {
    color: #e5e5e5;
    text-shadow: none;
}
.FlickrInterestingDay.today .image,
.FlickrInterestingDay.future .image {
    visibility: hidden;
}

/*** HighlightEffects ***/

.HighlightEffects {
    -moz-box-sizing: border-box;
    box-sizing: border-box;
    position: relative;
    -webkit-tap-highlight-color: rgba(0, 0, 0, 0); /* No tap highlight */
}

/*** HintTextBox ***/

.HintTextBox {
    cursor: text;
    display: inline-block;
    position: relative;
}

.HintTextBox .HintTextBox_textBox {
    -moz-box-sizing: border-box;
    box-sizing: border-box;
    font-size: 1em;
    width: 100%;
}

.HintTextBox .HintTextBox_hint {
    bottom: 0;
    left: 4px;
    height: 1.25em;
    margin: auto 0;
    position: absolute;
    overflow: hidden;
    right: 4px;
    top: 0;
}

/* Generic appearance */
.HintTextBox.generic .HintTextBox_hint {
    color: #aaa;
}

/*** LabeledColorSwatch ***/

.LabeledColorSwatch > * {
    display: inline-block;
    vertical-align: middle;
}

/*** LabeledInput ***/

.LabeledInput {
    white-space: nowrap;    /* Keep input and label on same line */
}

.LabeledInput > input {
    margin-right: 0;    /* Don't leave unclickable gap to right of input */
}

.LabeledInput .LabeledInput_content {
    padding-left: 3px;  /* Restore normal gap suppressed above */
    user-select: none;
    -khtml-user-select:none;
    -moz-user-select: none;
    -webkit-user-select: none;
    white-space: inherit;   /* Allow wrapping */
}

/*** LateralNavigator ***/

.LateralNavigator {
    display: table;
    -moz-user-select: -moz-none;
    -webkit-user-select: none;
    user-select: none;
}

.LateralNavigator .header {
    height: 30px; /* HACK */
}
.LateralNavigator .header > .HorizontalPanels > .panel {
    white-space: nowrap;
}

.LateralNavigator .LateralNavigator_content {
    width: 100%;
}

/* Generic appearance */
.LateralNavigator.generic {
    font-family: sans-serif;
}
.LateralNavigator.generic .LateralNavigator_heading {
    font-weight: bold;
    padding-top: 0.25em; /* Hacky attempt at vertical centering */
    text-align: center;
}
.LateralNavigator.generic .navigatorButton {
    font-size: larger;
    padding: 0 0.25em;
}

/*** ListBox ***/

.ListBox {
    overflow-y: auto;
}

.ListBox > * {
    display: block;
    outline: none;
}

/* Optional selection highlighting. */
.ListBox.highlightSelection > .selected {
    background: highlight;
    color: highlighttext;
}

/* Generic appearance */
.ListBox.generic {
    border: 1px solid lightgray;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
    cursor: default;
}
/* Handle common case where a generic control (e.g., button) is used as a list item. */
.ListBox.generic > * {
    -moz-box-sizing: border-box;
    box-sizing: border-box;
    padding: 0.25em;
    width: 100%;
}

/*** ListInlay ***/

/* Generic appearance */
.ListInlay.generic > * {
    padding: inherit;
}

/*** LoremIpsum ***/

/*
 * Remove the top/bottom margins from the first/last child. It's too problematic
 * for a host to style a control whose *children* have margins that affect
 * things outside of the control. The host ends up having to style the control's
 * children, which requires knowledge of the children and is therefore generally
 * bad practice.
 */ 
.LoremIpsum > p:first-child {
    margin-top: 0;
}
.LoremIpsum > p:last-child {
    margin-bottom: 0;
}

/*** MenuBar ***/

.MenuBar {
    position: relative; /* Necessary to get overlay behind the whole menu bar */
    -moz-user-select: -moz-none;
    -webkit-user-select: none;
    user-select: none;
}

/* Subclasses can extend this style */
.MenuBar.opened {}

/* Generic appearance */
.MenuBar.generic {
    background: white;
    border-bottom: 1px solid #e5e5e5;
}

/*** MenuItem ***/

.MenuItem {
    cursor: default;
    padding: 0.5em 1em;
    -moz-user-select: -moz-none;
    -webkit-user-select: none;
    user-select: none;
    white-space: nowrap;
}

/* Generic appearance */
.MenuItem.generic {
    padding: 0.5em 1em;
}
.MenuItem.generic:hover {
    background: #eee;
}
.MenuItem.generic.disabled {
    color: #999;
}
.MenuItem.generic.disabled:hover {
    background: inherit;
}

/*** MenuSeparator ***/

.MenuSeparator {
    border-top: 1px solid lightgray;
    margin: 0.5em 0;
}

/*** Modes ***/

.Modes > .hidden {
    display: none !important;
}

.Modes.maximize {
    position: relative;
}
.Modes.maximize > .hidden {
    display: inherit !important;
    position: absolute;
    top: 0;
    visibility: hidden;
}

/*** MultiListInlay ***/

/* Generic appearance */
.MultiListInlay.generic > * {
    padding: inherit;
}

/*** Overlay ***/

.Overlay {
    bottom: 0;
    cursor: default;
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
}

/*** PackedColumns ***/

.PackedColumns {
    position: relative;
}

.PackedColumns > * {
    position: absolute;
}

/*** Page ***/

.Page.fill {
    height: 100%;
    margin: 0;
    padding: 0;
    position: absolute;
    width: 100%;
}

/*** PageWithQuadrants ***/

.PageWithQuadrants {
    margin: 0;
}

.PageWithQuadrants .table {
    border-collapse: collapse;
    display: table;
    height: 100%;
    width: 100%;
}

.PageWithQuadrants .row {
    display: table-row;
}

.PageWithQuadrants .cell {
    display: table-cell;
    vertical-align: top;
}

/*** PanelWithOverflow ***/

.PanelWithOverflow {
    position: relative;
}

.PanelWithOverflow .PanelWithOverflow_content {
    position: relative; /* Simplifies layout calcs */
    overflow: hidden;
    white-space: nowrap;
}

/* By default, contents are arranged in inline layout */
.PanelWithOverflow .PanelWithOverflow_content > * {
    display: inline-block;
}
.PanelWithOverflow .PanelWithOverflow_content > .overflowed {
    visibility: hidden;
}

.PanelWithOverflow .menuButton {
    float: right;
}

/* In the menu, contents layout switches to vertical arrangement. */
.PanelWithOverflow .menuButton .PopupSource_popup > * {
    display: block;
}

/*** PersistentPanel ***/

.PersistentPanel {
    -moz-box-sizing: border-box;
    box-sizing: border-box;
}

.PersistentPanel .PersistentPanel_content {
    -moz-box-sizing: border-box;
    box-sizing: border-box;
}

.PersistentPanel.docked .PersistentPanel_content {
    position: fixed;
}

/* Generic appearance */
.PersistentPanel.generic .PersistentPanel_content {
    background: white;
    z-index: 1;
}

/*** Popup ***/

.Popup {
    display: none;
    position: absolute;
    z-index: 1;
}

.Popup.opened {
    display: block;
}

/* Generic appearance */
.Popup.generic {
    background: white;
    border: 1px solid #ccc; /* IE8 */
    border: 1px solid rgba(0, 0, 0, 0.2);
    -webkit-box-shadow: 0 2px 4px rgba( 0, 0, 0, 0.2 );
    -moz-box-shadow: 0 2px 4px rgba( 0, 0, 0, 0.2 );
    box-shadow: 0 2px 4px rgba( 0, 0, 0, 0.2 );
    -moz-box-sizing: border-box;
    box-sizing: border-box;
    padding: .25em;
    -moz-user-select: -moz-none;
    -webkit-user-select: none;
    user-select: none;
}

/*** SearchBox ***/

.SearchBox {
    display: inline-block;
    position: relative;
}

.SearchBox .SearchBox_content {
    display: block;
}
.SearchBox .SearchBox_content input {
    margin: 0;              /* For WebKit */
    padding-right: 1.3em;   /* Avoid overlap with icon */
}

.SearchBox .searchButton {
    bottom: 2px;
    padding: 0;
    position: absolute;
    right: 2px;
    top: 2px;
}
.SearchBox .searchIcon {
    -moz-box-sizing: border-box;
    box-sizing: border-box;
    display: block;         /* Remove inline padding */
    height: 1.3em;          /* Try to scale icon to text size */
    padding: 0.2em;
    width: 1.3em;
}

/* Generic appearance */
.SearchBox.generic .searchButton.generic {
    border: none;
}
.SearchBox.generic .searchButton.generic.disabled .searchIcon {
    opacity: 0.5;
}

/*** SimpleFlexBox ***/

.SimpleFlexBox {
    -moz-box-sizing: border-box;
    box-sizing: border-box;
    /* display: -moz-box; */
    display: -webkit-box;
    display: box;
}

.SimpleFlexBox > * {
    -moz-box-sizing: border-box;
    box-sizing: border-box;
    position: relative; /* So elements contained by panels can fill panels. */
}

.SimpleFlexBox .SimpleFlexBox_content {
    /* -moz-box-flex: 1; */
    -webkit-box-flex: 1;
    box-flex: 1;
}

.SimpleFlexBox.horizontal {
    /* -moz-box-orient: horizontal; */
    -webkit-box-orient: horizontal;
    box-orient: horizontal;
}

.SimpleFlexBox.vertical {
    /* -moz-box-orient: vertical; */
    -webkit-box-orient: vertical;
    box-orient: vertical;
}

.SimpleFlexBox.constrainHeight {
    /* This can be overridden, but seems like a useful default. */
    height: 100%;
}

/* noFlexBox will be applied where flexbox is unsupported or known to be buggy. */
.SimpleFlexBox.noFlexBox {
    position: relative;
}
.SimpleFlexBox.noFlexBox.horizontal {
    display: table;
    width: 100%;
}
.SimpleFlexBox.noFlexBox.horizontal > * {
    display: table-cell;
    vertical-align: top;
}
.SimpleFlexBox.noFlexBox.horizontal > .panel {
    width: 0;   /* Forces panel to its minimum width; not actually zero width. */
}
.SimpleFlexBox.noFlexBox.constrainHeight {
    display: inherit;
}
.SimpleFlexBox.noFlexBox.constrainHeight > * {
    display: inherit; 
    position: absolute;
    vertical-align: inherit;
}
.SimpleFlexBox.noFlexBox.constrainHeight > .panel {
    width: auto;
}

/*** SlidingPages ***/

.SlidingPages {
    -moz-box-sizing: border-box;
    box-sizing: border-box;
    overflow: hidden;
    width: 0; /* Prevent anything from appearing until we've set width. */
}

.SlidingPages .SlidingPages_content {
    position: relative; /* So we can shift it over */
    white-space: nowrap;
}
.SlidingPages .SlidingPages_content > * {
    display: inline-block;
}

/*** SlidingPagesWithDots ***/

.SlidingPagesWithDots {
    display: inline-block; /* Size to content */ 
    overflow: hidden;
}

.SlidingPagesWithDots .buttonPanel {
    text-align: center;
}
.SlidingPagesWithDots .pageButtons {
    display: inline-block;
    margin: 0 auto;
}

/* Generic appearance */
.SlidingPagesWithDots.generic .buttonPanel {
    padding: 5px;
}

.SlidingPagesWithDots.generic .pageButtons > .BasicButton {
    background: white;
    border: 1px solid #888;
    border-radius: 5px;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
    height: 10px;
    margin: 2px;
    padding: 5px;
    width: 10px;
}

.SlidingPagesWithDots.generic .pageButtons > .BasicButton:hover {
    background: #ddd;
}

.SlidingPagesWithDots.generic .pageButtons > .BasicButton.selected {
    background: #bbb;
}

/*** Sprite ***/

.Sprite {
    background-repeat: no-repeat;
}

/*** SpriteButton ***/

.SpriteButton {
    display: inline-block;
    outline: none;
    position: relative;
}

.SpriteButton .Sprite {
    height: 100%;
    position: absolute;
    top: 0;
    /* 
     * Each sprite covers half the background
     */
    width: 50%;
    z-index: 0;
}

.SpriteButton .backgroundLeft {
    background-position: 0 0;
    left: 0;
}

.SpriteButton .backgroundRight {
    background-position: right 0;
    /*
     * Use left: 50% instead of right: 0, as the latter doesn't work exactly right on WebKit.
     */
    left: 50%;
}

.SpriteButton .SpriteButton_content {
    position: relative;
}

/*** Tab ***/

.Tab {
    /*
     * Forcing a tiny bit of padding (instead of zero) helps in the case where
     * a surrounding TabSet is trying to determine the height of a Tab that
     * contains a paragraph (or, presumably, other elements) that have top and
     * bottom margins. In that case, the Tab's outerHeight() will fail to
     * include the paragraph's margins, with the result that the TabSet can
     * incorrectly calculate the height it needs to be. Forcing some padding
     * seems to work around this problem.
     */
    padding: 1px;
}

/*** TabSet ***/

.TabSet {
    position: relative;
}

.TabSet .tabButtons {
    white-space: nowrap; /* So tabs don't wrap. */
}

/* Generic appearance */
.TabSet.generic .TabSet_content {
    border: 1px solid #888;
    height: 100%;
}
.TabSet.generic .tabButtons {
    position: relative;
    top: 1px;
    z-index: 1;
}
.TabSet.generic .tabButtons .BasicButton.generic {
    background: none;
    border-color: #bbb;
    border-bottom-color: transparent;
    border-bottom-left-radius: 0;
    border-bottom-right-radius: 0;
    color: #444;
    filter: none;
    margin-right: 0.25em;
    outline: none;
}
.TabSet.generic .tabButtons .BasicButton.generic.selected {
    border-color: #888;
    border-bottom-color: white;
    color: inherit;
}

/*** TextBoxWithButton ***/

.TextBoxWithButton {
    display: inline-block;
}

.TextBoxWithButton > * {
    display: inline-block;
    vertical-align: middle;
}

/*** TextCondenser ***/

.TextCondenser {
    overflow: hidden;
    white-space: nowrap;
}

/*
 * To hide a copy of the text, we set its visibility to hidden so that its width
 * will still be valid. We use position absolute on the hidden text to pull it
 * out of the flow.
 */
.TextCondenser .condensed {
    visibility: hidden;
    position: absolute;
}

.TextCondenser.condensed .normal {
    visibility: hidden;
    position: absolute;
}

.TextCondenser.condensed .condensed {
    visibility: visible;
    position: relative;
}

/*** ToggleButton ***/

/* Generic appearance */

.ToggleButton.generic.selected {
    background: lightgray;
    border-color: gray;
}
.ToggleButton.generic.selected:hover {
    background-color: #888;
}

/*** TransientMessage ***/

/* Generic appearance */
.TransientMessage.generic {
    background: #444; /* IE8 */
    background: rgba( 0, 0, 0, 0.5 );
    border-color: white;
    border-top-style: none;
    color: white;
    padding: .75em;
    position: fixed;
    top: 0;
}

/*** ValidatingTextBox ***/

/* Generic appearance */
.ValidatingTextBox.generic.invalid {
    background-color: pink;
}

/*** VerticalAlign ***/

.VerticalAlign {
    display: table;
    height: 100%;
}

.VerticalAlign > * {
    display: table-cell;
    vertical-align: middle;
}

/*** VerticalPanels ***/

.VerticalPanels.noFlexBox.constrainHeight > * {
    left: 0;
    right: 0;
}
.VerticalPanels.noFlexBox.constrainHeight .SimpleFlexBox_panel1 {
    top: 0;
}
.VerticalPanels.noFlexBox.constrainHeight .SimpleFlexBox_panel2 {
    bottom: 0;
}

.VerticalPanels.constrainHeight .SimpleFlexBox_content {
    overflow-y: auto;
}

/*** CalendarMonthNavigator ***/

/* Generic appearance */
.CalendarMonthNavigator.generic .CalendarDay.selected {
    background-color: #ddd;
}
.CalendarMonthNavigator.generic .todayContainer {
    padding-top: 0.25em;
    text-align: center;
}

/*** ComboBox ***/

.ComboBox {
    display: inline-block;
}

.ComboBox .PopupSource_content {
    position: relative;
}

.ComboBox .PopupSource_popup {
    outline: none;
}

.ComboBox .ComboBox_content {
    margin-right: 1.5em; /* HACK to avoid overlapping button. Not general enough. */
}

.ComboBox .ComboBox_content[type='text'], .ComboBox .ComboBox_content input[type='text'] {
    border: none;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
    outline: none;
    padding: 2px;
}

.ComboBox .dropdownButton {
    bottom: 0;
    height: 100%;
    outline: none;
    position: absolute;
    right: 0;
    text-align: center;
    top: 0;
}

/* Generic appearance */
.ComboBox.generic {
    border: 1px solid lightgray;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
}
.ComboBox.generic .dropdownButton {
    border: none;
    border-left: 1px solid transparent;
    border-radius: 0;
    padding: 0 0.25em; /* Tighter padding that normal */
}
.ComboBox.generic:hover .dropdownButton {
    border-left-color: lightgray;
}

/*** DateTextBox ***/

.DateTextBox {
    width: 6em;
}

/*** Dialog ***/

.Dialog {
    position: fixed;
}

/* Generic appearance */
.Dialog.generic {
    padding: 1.5em;
}

/*** Editable ***/

.Editable > * {
    -moz-box-sizing: border-box;
    box-sizing: border-box;
    width: 100%;
}

/* Generic appearance */
.Editable.generic .Editable_read {
    outline: none;
}

/*** EditableText ***/

/* Generic appearance */

/*
 * Assuming the read portion is just a div, and the edit portion has some
 * input, try to match the standard border and padding of input elements so that
 * contents don't appear to shift position when changing the editing state.
 */
.EditableText.generic .Editable_read {
    border: 2px solid transparent;
    cursor: text;
    margin: 0;
    min-height: 2em; /* So user can still click on it if it's empty. */
    padding: 1px;
}

.EditableText.generic .Editable_edit {
	margin: 0;
}

/*** FlickrInterestingNavigator ***/

.FlickrInterestingNavigator {
    font-family: Arial, Helvetica, sans-serif;
    width: 800px;
}

.FlickrInterestingNavigator .header {
    border-bottom: 1px dotted #ddd;
    font-size: 12px;
}
.FlickrInterestingNavigator .header .LateralNavigator_heading {
    color: #ff0084;
    text-align: center;
}

.FlickrInterestingNavigator .dayOfWeek {
    font-family: "Trebuchet MS", Arial, Helvetica, sans-serif;
    font-size: 14px;
    font-weight: bold;
    padding: 5px;
    text-align: left;
    text-transform: uppercase;
}

.FlickrInterestingNavigator .calendar {
    border-collapse: collapse;
    font-size: 18px;
    font-weight: bold;
}

.FlickrInterestingNavigator .monthButtonName {
    color: #0063dc;
    text-decoration: underline;
}
.FlickrInterestingNavigator .monthButtonName:hover {
    background-color: #0259C4;
    color: white;
    text-decoration: none;
}
.FlickrInterestingNavigator .BasicButton.disabled .monthButtonName {
    background-color: inherit;
    color: black;
    text-decoration: none;
}

.FlickrInterestingNavigator .chevron {
    color: #ff0084;
    font-weight: bold;
}

.FlickrInterestingNavigator .FlickrInterestingDay.insideMonth {
    border-style: solid;
    border-width: 1px;
}
.FlickrInterestingNavigator .FlickrInterestingDay.outsideMonth {
    visibility: hidden;
}

/*** HorizontalPanels ***/

.HorizontalPanels.noFlexBox.constrainHeight > * {
    top: 0;
    bottom: 0;
}
.HorizontalPanels.noFlexBox.constrainHeight .SimpleFlexBox_panel1 {
    left: 0;
}
.HorizontalPanels.noFlexBox.constrainHeight .SimpleFlexBox_panel2 {
    right: 0;
}

.HorizontalPanels.constrainHeight .SimpleFlexBox_content {
    overflow-y: auto;
}

/*** ListComboBox ***/

.ListComboBox .list {
    border: none;
    -moz-outline: none;
    outline: none;
}
.ListComboBox .list > * {
    display: block;
}

/* Generic appearance */
.ListComboBox.generic .BasicButton {
    border: none;
}

/*** Menu ***/

.Menu {
    cursor: default;
    display: inline-block;
    -moz-user-select: -moz-none;
    -webkit-user-select: none;
    user-select: none;
}

.Menu .PopupSource_content {
    white-space: nowrap;
}

.Menu .shield {
    display: none;  /* Shield isn't shown unless it's requested. */
    position: absolute;
    z-index: 0;
}
.Menu .PopupSource_popup.popupAlignLeft .shield {
    left: 0;
}
.Menu .PopupSource_popup.popupAlignRight .shield {
    right: 0;
}

/* Generic appearance */
.Menu.generic {
    -moz-box-sizing: border-box;
    box-sizing: border-box;
}

.Menu.generic .PopupSource_content {
    border: 1px solid transparent;
    padding: 0.5em;
}
.Menu.generic .PopupSource_content:hover {
    background: #eee;
}

.Menu.generic .shield {
    background: white;  /* Same as menu's background color */
    height: 1px;        /* Same as this menu's border-top-width */
    top: -1px;          /* Same as border-top-width but negative */
}
.Menu.generic .PopupSource_popup.popupAppearsBelow .shield {
    display: block;
}

.Menu.generic .PopupSource_popup {
    cursor: default;
    margin: 0;
    outline: none;
    padding: 0.5em 0;
}

.Menu.generic.opened .PopupSource_content {
    background: white;
    border-color: #ccc; /* IE8 */
    border-color: rgba(0, 0, 0, 0.2);
    border-bottom-style: none;
}

/*** ModalOverlay ***/

/* Generic appearance */
.ModalOverlay.generic {
    background: black;
    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=25)"; /* IE8 */
    opacity: 0.25;
}

/*** PopupButton ***/

.PopupButton {
    display: inline-block;
}

.PopupButton .PopupButton_content, .PopupButton .indicator {
    display: inline-block;
}

.PopupButton .PopupButton_content {
    display: none;
}

/*** RotatingPagesWithDots ***/

.RotatingPagesWithDots .letter {
    -moz-box-sizing: border-box;
    box-sizing: border-box;
    font-family: Arial, Helvetica, sans-serif;
    font-size: 96px;
    font-weight: bold;
    padding: 40px;
    text-align: center;
    vertical-align: middle;
}

/*** SampleSpriteButton ***/

.SampleSpriteButton {
    font-family: Helvetica, Arial, sans-serif;
    font-size: 9pt;
    padding: 0.5em 1em;
}

.SampleSpriteButton.disabled {
    color: #bbb;
}

/*** ColorSwatchComboBox ***/

/* Generic appearance */
.ColorSwatchComboBox.generic .LabeledColorSwatch.generic {
    padding-left: 0;
    padding-right: 0;
}

